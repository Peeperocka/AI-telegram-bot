from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from registry import AIRegistry
from states import MODE_SINGLE, MODE_ARENA


def get_mode_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üë§ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", callback_data=f"mode_{MODE_SINGLE}"),
            InlineKeyboardButton(text="‚öîÔ∏è –ê—Ä–µ–Ω–∞", callback_data=f"mode_{MODE_ARENA}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_arena_type_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã", callback_data="arena_type_text"),
        ],
        [
            InlineKeyboardButton(text="üñºÔ∏è –û—Ç–≤–µ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", callback_data="arena_type_image"),
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_mode")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_arena_vote_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="1Ô∏è‚É£ –û—Ç–≤–µ—Ç 1 –ª—É—á—à–µ", callback_data="vote_1"),
            InlineKeyboardButton(text="2Ô∏è‚É£ –û—Ç–≤–µ—Ç 2 –ª—É—á—à–µ", callback_data="vote_2"),
        ],
        [
            InlineKeyboardButton(text="üëé –ù–∏ –æ–¥–∏–Ω –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data="vote_none"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_providers_keyboard() -> InlineKeyboardMarkup:
    registry = AIRegistry()
    providers = registry.get_providers_to_user()

    buttons = []
    for provider in providers:
        buttons.append([
            InlineKeyboardButton(
                text=f"{provider.capitalize()} ‚û°Ô∏è",
                callback_data=f"provider_{provider}"
            )
        ])

    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_mode"
    )])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_models_keyboard(provider: str) -> InlineKeyboardMarkup:
    registry = AIRegistry()
    models = registry.get_models_for_provider(provider)

    buttons = []
    for model in models:
        version = model.meta.version
        btn_text = f"{version}"
        if model.meta.default:
            btn_text += " ‚òÖ"

        buttons.append([
            InlineKeyboardButton(
                text=btn_text,
                callback_data=f"model_{provider}_{version}"
            )
        ])

    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º",
        callback_data="back_to_providers"
    )])

    return InlineKeyboardMarkup(inline_keyboard=buttons)
