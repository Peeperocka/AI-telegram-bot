import asyncio
import database

from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from keyboards.inline_keyboards import get_mode_keyboard, get_models_keyboard, get_providers_keyboard, \
    get_arena_type_keyboard
from keyboards.reply_keyboards import get_settings_reply_keyboard
from registry import AIRegistry
from states import SettingsState, ChatState

router = Router()


@router.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    print(f"User {user_name} (ID: {user_id}) started the bot.")

    try:
        database.register_or_check_user(user_id)
        print(f"User {user_id} checked/registered in DB.")

    except Exception as e:
        print(f"Error registering/checking user {user_id} in DB: {e}")

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        reply_markup=get_mode_keyboard(),
    )
    await state.set_state(SettingsState.choosing_mode)


@router.callback_query(SettingsState.choosing_mode, F.data.startswith("mode_"))
async def choose_mode_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    mode = callback.data.split("_")[1]
    await state.update_data(mode=mode)

    await callback.message.delete()

    if mode == "single":
        await callback.message.answer(
            "–í—ã–±—Ä–∞–Ω '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º'.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ AI –º–æ–¥–µ–ª–∏:",
            reply_markup=get_providers_keyboard()
        )
        await state.set_state(SettingsState.choosing_provider)
    elif mode == "arena":
        await callback.message.answer(
            "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º '‚ú® –ê—Ä–µ–Ω–∞ ‚ú®'.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–µ–Ω—ã (–∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å):",
            reply_markup=get_arena_type_keyboard()
        )
        await state.set_state(SettingsState.choosing_arena_type)
    await callback.answer()


@router.callback_query(SettingsState.choosing_arena_type, F.data.startswith("arena_type_"))
async def choose_arena_type_handler(callback: types.CallbackQuery, state: FSMContext):
    arena_type_callback_data = callback.data

    arena_type_raw = arena_type_callback_data.split("_")[-1]

    if arena_type_raw not in ["text", "image"]:
        print(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π arena_type –∫–æ–ª–±—ç–∫: {callback.data}")
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ä–µ–Ω—ã.", show_alert=True)
        return

    await state.update_data(arena_type=arena_type_raw)

    arena_type_name_display = {
        "text": "‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã",
        "image": "üñºÔ∏è –û—Ç–≤–µ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)"
    }.get(arena_type_raw, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")

    await callback.message.delete()
    await callback.message.answer(
        f"‚ú® –ê—Ä–µ–Ω–∞ —Ç–∏–ø–∞ '{arena_type_name_display}' –≤—ã–±—Ä–∞–Ω–∞! ‚ú®\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à **–ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å** (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.\n"
        "–ú–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=get_settings_reply_keyboard()
    )

    await state.set_state(ChatState.waiting_arena_query)
    await callback.answer()


@router.callback_query(SettingsState.choosing_provider, F.data.startswith("provider_"))
async def choose_provider_handler(callback: types.CallbackQuery, state: FSMContext):
    provider = callback.data.split("_")[1]
    await state.update_data(current_provider=provider)

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é {provider}:",
        reply_markup=get_models_keyboard(provider)
    )
    await state.set_state(SettingsState.choosing_model)
    await callback.answer()


@router.callback_query(SettingsState.choosing_model, F.data.startswith("model_"))
async def choose_model_handler(callback: types.CallbackQuery, state: FSMContext):
    _, provider, version = callback.data.split("_")

    await state.update_data(
        model_id=f"{provider}:{version}",
        model_name=f"{provider} {version}"
    )

    await callback.message.delete()
    await callback.message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {version}\n"
        f"–≠—Ç–æ {AIRegistry().get_model(provider, version).meta.description}\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã!",
        reply_markup=get_settings_reply_keyboard()
    )
    await state.set_state(ChatState.waiting_single_query)
    await callback.answer()


@router.callback_query(SettingsState.choosing_model, F.data == "back_to_providers")
async def back_to_providers_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:",
        reply_markup=get_providers_keyboard()
    )
    await state.set_state(SettingsState.choosing_provider)
    await callback.answer()


@router.callback_query(SettingsState.choosing_arena_type, F.data == "back_to_mode")
@router.callback_query(SettingsState.choosing_provider, F.data == "back_to_mode")
async def back_to_mode_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        reply_markup=get_mode_keyboard()
    )
    await state.set_state(SettingsState.choosing_mode)
    await callback.answer()


@router.callback_query(SettingsState.choosing_provider, F.data.startswith("model_"))
async def choose_model_handler(callback: types.CallbackQuery, state: FSMContext):
    _, provider, version = callback.data.split("_")
    await state.update_data(
        model_id=f"{provider}:{version}",
        model_name=f"{provider} {version}"
    )
    await callback.message.delete()
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {provider} {version}",
        reply_markup=get_settings_reply_keyboard()
    )
    await state.set_state(ChatState.waiting_single_query)
    await callback.answer()


@router.callback_query(SettingsState.choosing_model, lambda c: c.data == "back_to_mode")
async def back_to_mode_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        reply_markup=get_mode_keyboard()
    )
    await state.set_state(SettingsState.choosing_mode)
    await callback.answer()


@router.message(Command(commands="settings"))
@router.message(F.text.lower() == "/settings")
async def settings_command_handler(message: types.Message, state: FSMContext) -> None:
    temp_msg = await message.answer("‚öôÔ∏è –ü–µ—Ä–µ—Ö–æ–∂—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(0.5)
    await temp_msg.delete()
    await message.answer(
        "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        reply_markup=get_mode_keyboard(),
    )
    await state.set_state(SettingsState.choosing_mode)
